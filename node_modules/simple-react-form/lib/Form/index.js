'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _desc, _value, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _keys = require('lodash/keys');

var _keys2 = _interopRequireDefault(_keys);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _getNewValue = require('./getNewValue');

var _getNewValue2 = _interopRequireDefault(_getNewValue);

var _isReactNative = require('../utility/isReactNative');

var _isReactNative2 = _interopRequireDefault(_isReactNative);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var Form = (_class = (_temp = _class2 = function (_React$Component) {
  (0, _inherits3.default)(Form, _React$Component);

  function Form(props) {
    (0, _classCallCheck3.default)(this, Form);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props));

    _this.state = {};

    if (props.doc) {
      throw new Error('Doc prop is deprecated, please use state instead');
    }
    return _this;
  }

  (0, _createClass3.default)(Form, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        doc: this.getValue(),
        onChange: this.onChange,
        errorMessages: this.props.errorMessages,
        form: this
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.state !== this.props.state) {
        this.setState({ value: null }); // will reset state because doc prop has changed
      }
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      return this.state.value || this.props.state || {};
    }
  }, {
    key: 'onChange',
    value: function onChange(fieldName, fieldValue) {
      var value = (0, _getNewValue2.default)(this.getValue(), fieldName, fieldValue);
      this.setState({ value: value });
      this.props.onChange(value);
    }
  }, {
    key: 'onFormSubmit',
    value: function onFormSubmit(event) {
      event.preventDefault();
      return this.submit();
    }
  }, {
    key: 'submit',
    value: function submit() {
      if (!(0, _isFunction2.default)(this.props.onSubmit)) {
        throw new Error('You should pass a onSubmit prop');
      }
      return this.props.onSubmit(this.getValue());
    }
  }, {
    key: 'render',
    value: function render() {
      var domProps = (0, _omit2.default)(this.props, (0, _keys2.default)(Form.propTypes));
      if ((0, _isReactNative2.default)()) {
        return this.props.children;
      }
      if (this.props.useFormTag) {
        return _react2.default.createElement(
          'form',
          (0, _extends3.default)({}, domProps, { onSubmit: this.onFormSubmit }),
          this.props.children
        );
      } else {
        return _react2.default.createElement(
          'div',
          domProps,
          this.props.children
        );
      }
    }
  }]);
  return Form;
}(_react2.default.Component), _class2.propTypes = {
  /**
   * The fields of the form
   */
  children: _propTypes2.default.node,
  /**
   * The object that has the values of the form.
   */
  state: _propTypes2.default.object,
  /**
   * A callback that fires when the form value changes.
   * The argument will be the state with the updated field value.
   */
  onChange: _propTypes2.default.func,
  /**
   * Pass error messages in a object
   */
  errorMessages: _propTypes2.default.object,
  /**
   * Use form tag as a container
   */
  useFormTag: _propTypes2.default.bool,
  /**
   * A function that is called when the form is submitted.
   */
  onSubmit: _propTypes2.default.func
}, _class2.defaultProps = {
  onChange: function onChange() {},
  errorMessages: null,
  useFormTag: true
}, _class2.childContextTypes = {
  doc: _propTypes2.default.object,
  onChange: _propTypes2.default.func.isRequired,
  errorMessages: _propTypes2.default.object,
  form: _propTypes2.default.any
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'getValue', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'getValue'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'onChange', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'onChange'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'onFormSubmit', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'onFormSubmit'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'submit', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'submit'), _class.prototype)), _class);
exports.default = Form;